<?php

namespace App\Services;
use Illuminate\Support\Facades\Storage;

class NgramService
{
    public $corpus;
    public $vocab = [];
    public $bigramMap = [];
    public $trigramMap = [];

    public function __construct()
    {
        
        $file = ('storage/ngram-input.txt');
        // dd($file);
        // $text = file_get_contents($file);
        // $text .= "The girl bought a chocolate The boy ate the chocolate The girl bought a toy The girl played with the toy The girl is here The girl is going home";
        // dd(str_word_count($text, 1));
        // $this->corpus = explode(" ", strtolower($text));
        
        // $text = $this->textcleaner($text);
        // $this->corpus = str_word_count(strtolower($text), 1);
        // dd($this->corpus);
        $this->loadLargeCorpus($file);
        // dd(memory_get_usage(true) / 1024 / 1024 . " MB");
        
    }

    public function textcleaner($text){
        $text = preg_replace('/<[^>]+>/', '', $text);
        $text = preg_replace('/[^\w\s]/u', '', $text);

        $text = strtolower($text);
    
        return trim($text);
    }

    public function loadLargeCorpus($filePath)
    {
        $handle = fopen($filePath, "r");

        if ($handle) {
            while (($line = fgets($handle)) !== false) {
                $cleanedLine = $this->textcleaner($line);

                $words = str_word_count($cleanedLine, 1);

                foreach ($words as $word) {
                    $this->corpus[] = $word;
                }
            }
            fclose($handle);
        } else {
            throw new \Exception("Could not open file: $filePath");
        }
    }


    public function setVocab()
    {
        $this->vocab = array_unique($this->corpus);
        // foreach ($this->corpus as $word) {
        //     if (!isset($this->vocab[$word])) {
        //         $this->vocab[] = $word;
        //     }
        //     if (!in_array($word, $this->vocab)) {
        //         $this->vocab[] = $word;
        //     }
        // }
    }

    public function generateBiTrigram()
    {
        for ($i = 0; $i < count($this->corpus); $i++) {
            if ($i < count($this->corpus) - 1) {
                $bigram = $this->corpus[$i] . ' ' . $this->corpus[$i + 1];
                $this->bigramMap[$bigram] = ($this->bigramMap[$bigram] ?? 0) + 1;
            }
            if ($i < count($this->corpus) - 2) {
                $trigram = $this->corpus[$i] . ' ' . $this->corpus[$i + 1] . ' ' . $this->corpus[$i + 2];
                $this->trigramMap[$trigram] = ($this->trigramMap[$trigram] ?? 0) + 1;
            }
        }
        // for ($i = 0; $i < count($this->corpus) - 1; $i++) {
        //     $bigram = $this->corpus[$i] . ' ' . $this->corpus[$i + 1];
        //     $this->bigramMap[$bigram] = isset($this->bigramMap[$bigram]) ? $this->bigramMap[$bigram] + 1 : 1;
        // }

        // for ($i = 0; $i < count($this->corpus) - 2; $i++) {
        //     $trigram = $this->corpus[$i] . ' ' . $this->corpus[$i + 1] . ' ' . $this->corpus[$i + 2];
        //     $this->trigramMap[$trigram] = isset($this->trigramMap[$trigram]) ? $this->trigramMap[$trigram] + 1 : 1;
        // }
    }

    public function suggestNext($input)
    {
        // dump(strlen($input));
        // if(strlen($input) <= 2) return;
        $inputTokens = explode(" ", strtolower(trim($input)));
        // dd($inputTokens);
        if (count($inputTokens) < 2) {
            return []; 
        }
        $lastWord1 = $inputTokens[count($inputTokens) - 2];
        $lastWord2 = $inputTokens[count($inputTokens) - 1];

        $vocabProbabilities = [];
        foreach ($this->vocab as $vocString) {
            $testTrigram = $lastWord1 . ' ' . $lastWord2 . ' ' . $vocString;
            $testBigram = $lastWord1 . ' ' . $lastWord2;

            $testTrigramCount = isset($this->trigramMap[$testTrigram]) ? $this->trigramMap[$testTrigram] : 0;
            $testBigramCount = isset($this->bigramMap[$testBigram]) ? $this->bigramMap[$testBigram] : 0;

            //using backoff
            // if ($testTrigramCount > 0) {
            //     $score = $testTrigramCount;
            // } elseif ($testBigramCount > 0) {
            //     $score = 0.7 * $testBigramCount;
            // } else {
            //     $score = 0.1; 
            // }
            
            // $vocabProbabilities[] = [
            //     'word' => $vocString,
            //     'probability' => $score
            // ];

            // without using backoff
            $probability = ($testBigramCount != 0) ? ($testTrigramCount / $testBigramCount) : 0.0;

            $probability = ($testBigramCount != 0) ?
                         (($testTrigramCount + 1) / ($testBigramCount + count($this->vocab)))
                        : 0.0;

            $vocabProbabilities[] = ['word' => $vocString, 'probability' => $probability];
        }
        usort($vocabProbabilities, fn($a, $b) => $b['probability'] <=> $a['probability']);

        // dd(array_slice(array_column($vocabProbabilities,'word'), 0, 3));
        // dd(array_slice(($vocabProbabilities), 0, 3));
        return (array_slice(($vocabProbabilities), 0, 3));
        // return array_slice(array_column($vocabProbabilities,'word'), 0, 3);
    }
}
